#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const json_bigint_1 = __importDefault(require("json-bigint"));
const yargs_1 = __importDefault(require("yargs"));
const fs_1 = __importDefault(require("fs"));
const scanner_1 = require("../src/element/scanner");
const src_1 = require("../src");
const argv = yargs_1.default.command('$0 <input>', 'convert llrp bin to json', yargs => {
    yargs.positional('input', {
        describe: 'path to llrp bin file',
        type: 'string'
    }).demandOption(['input']);
})
    .option('output', {
    alias: 'o',
    description: 'path to output file',
    type: 'string'
})
    .option('iso8601fp', {
    alias: 'i',
    description: 'enables datetime microsecond full precision (default: true)',
    type: 'boolean',
    default: true
}).help().alias('help', 'h')
    .argv;
(async () => {
    let buf = fs_1.default.readFileSync(argv.input); // https://github.com/yargs/yargs/issues/1649
    let scanner = new scanner_1.LLRPScanner();
    scanner.addBuffer(buf);
    let result = [];
    while (buf = scanner.getNext()) {
        let msg = new src_1.LLRPMessage(buf);
        result.push(msg.decode().toLLRPData());
    }
    let jsonData = json_bigint_1.default.stringify(result, null, 2);
    if (argv.output) {
        fs_1.default.writeFileSync(argv.output, jsonData, {
            encoding: 'utf-8'
        });
    }
    else {
        console.log(jsonData);
    }
})().catch(e => console.error(e));
//# sourceMappingURL=llrp2json.js.map