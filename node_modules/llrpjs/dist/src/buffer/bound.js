"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LLRPBound = void 0;
const Mixin_1 = require("../bryntum/chronograph/Mixin");
/**
 * Buffer boundaries for each element/field
 */
class LLRPBound extends Mixin_1.Mixin([], (base) => class LLRPBound extends base {
    constructor() {
        super(...arguments);
        this._byteSize = 0; // number of bytes
        this._bitSize = 0; // total number of bits. Equals ( <byteSize> * 8 + <bitCount> ) (specifically used by u1v and reserved)
        this._startByte = 0; // starting byte of our field
        this._startBit = 0; // starting bit of our field
    }
    setBitSize(bitSize) {
        this._bitSize = bitSize;
        this._byteSize = bitSize >> 3;
        return this;
    }
    getBitSize() {
        return this._bitSize;
    }
    getByteSize() {
        return this._byteSize;
    }
    setStartBit(bit) {
        this._startBit = bit;
        this._startByte = bit >> 3;
        return this;
    }
    getStartBit() {
        return this._startBit;
    }
    getEndBit() {
        return this._startBit + this._bitSize - 1;
    }
    setStartByte(byte) {
        this._startByte = byte;
        return this;
    }
    getStartByte() {
        return this._startByte;
    }
    getEndByte() {
        return this._startByte + this._byteSize - 1;
    }
}) {
}
exports.LLRPBound = LLRPBound;
//# sourceMappingURL=bound.js.map