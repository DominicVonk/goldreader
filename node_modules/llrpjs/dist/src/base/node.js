"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LLRPNode = void 0;
const Mixin_1 = require("../bryntum/chronograph/Mixin");
const bound_1 = require("../buffer/bound");
const error_1 = require("./error");
class LLRPNode extends Mixin_1.Mixin([bound_1.LLRPBound], (base) => class LLRPNode extends base {
    constructor() {
        super(...arguments);
        this.prev = null;
        this.next = null;
    }
    setBuffer(b) {
        this.buffer = b;
        return this;
    }
    getBuffer() {
        return this.buffer;
    }
    setPrev(v) {
        this.prev = v;
        return this;
    }
    setNext(v) {
        this.next = v;
        return this;
    }
    encode() {
        this.buffer.setBitIndex(this.getStartBit());
        return this;
    }
    decode() {
        this.buffer.setBitIndex(this.getStartBit());
        if (!this.buffer.hasData(this.getBitSize()))
            throw new error_1.LLRPError("ERR_LLRP_NO_DATA_IN_BUF", `no data left in buffer. index = ${this.buffer.getByteIndex()}, maxIndex = ${this.getEndByte()}, requiredSize ${this.getByteSize()}`);
        return this;
    }
    get withinBoundLimits() {
        return this.buffer.getBitIndex() <= this.getEndBit();
    }
}) {
}
exports.LLRPNode = LLRPNode;
;
//# sourceMappingURL=node.js.map