"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LLRPParameterHeader = exports.LLRPMessageHeader = void 0;
const header_fd_1 = require("./header-fd");
const list_1 = require("../field/list");
const llrp_1 = require("../field/llrp");
class LLRPMessageHeader extends list_1.LLRPFieldList {
    constructor() {
        super(...arguments);
        this.rsvdVersionType = llrp_1.LLRPFieldFactory(header_fd_1.LLRP_TD_RSVD_VERSION_TYPENUM);
        this.messageLength = llrp_1.LLRPFieldFactory(header_fd_1.LLRP_TD_MESSAGE_LENGTH);
        this.messageId = llrp_1.LLRPFieldFactory(header_fd_1.LLRP_TD_MESSAGE_ID);
    }
    build() {
        if (!this.isEmpty)
            this.clear();
        this.push(this.rsvdVersionType);
        this.push(this.messageLength.setStartBit(this.rsvdVersionType.getBitSize()));
        this.push(this.messageId.setStartBit(this.messageLength.getBitSize()));
        return this;
    }
    setMessageLength(length) {
        this.messageLength.setValue(length);
        return this;
    }
    getMessageLength() {
        return this.messageLength.getValue();
    }
    setMessageTypeNum(typeNum) {
        this.rsvdVersionType.setValue((LLRPMessageHeader.version << 10) + typeNum);
        return this;
    }
    getMessageTypeNum() {
        return this.rsvdVersionType.getValue() & 0x3ff;
    }
    setMessageId(id) {
        this.messageId.setValue(id);
        return this;
    }
    getMessageId() {
        return this.messageId.getValue();
    }
    getVersion() {
        return (this.rsvdVersionType.getValue() & 0x1c00) >>> 10;
    }
}
exports.LLRPMessageHeader = LLRPMessageHeader;
LLRPMessageHeader.version = 1;
class LLRPParameterHeader extends list_1.LLRPFieldList {
    constructor() {
        super(...arguments);
        // TLV
        this.rsvdType = llrp_1.LLRPFieldFactory(header_fd_1.LLRP_TD_RSVD_TYPENUM);
        this.paramLength = llrp_1.LLRPFieldFactory(header_fd_1.LLRP_TD_PARAM_LENGTH);
        // TV
        this.tvType = llrp_1.LLRPFieldFactory(header_fd_1.LLRP_TD_TV_TYPENUM);
    }
    buildTLV() {
        if (!this.isEmpty)
            this.clear();
        this.push(this.rsvdType);
        this.push(this.paramLength);
        return this;
    }
    buildTV() {
        if (!this.isEmpty)
            this.clear();
        this.push(this.tvType);
        return this;
    }
    setTVTypeNum(v) {
        this.tvType.setValue(0x80 | v);
        return this;
    }
    setTLVTypeNum(v) {
        this.rsvdType.setValue(v & 0x3ff);
        return this;
    }
    setTLVLength(v) {
        this.paramLength.setValue(v);
        return this;
    }
    getTLVLength() {
        return this.paramLength.getValue();
    }
}
exports.LLRPParameterHeader = LLRPParameterHeader;
//# sourceMappingURL=header.js.map