"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LLRPProxyMessage = void 0;
const message_1 = require("../element/message");
const buffer_1 = require("../buffer/buffer");
class LLRPProxyMessage {
    constructor(args) {
        if (args instanceof Buffer) {
            this.origin = new message_1.LLRPMessage(new buffer_1.LLRPBuffer(args));
        }
        else if (args instanceof message_1.LLRPMessage) {
            this.origin = args;
        }
        else {
            this.origin = new message_1.LLRPMessage(args);
        }
    }
    getName() {
        return this.origin.getName();
    }
    getResponseName() {
        return this.origin.responseType?.name || null;
    }
    encode() {
        this.origin.assemble().encode();
        return this;
    }
    decode() {
        this.origin.decode().marshal(); // convert buffer to elements (TODO: this needs to be optimized to decode and marshal in one shot)
        return this;
    }
    toLLRPData() {
        return this.origin.toLLRPData();
    }
    getBuffer() {
        return this.origin.getBuffer().getBuffer();
    }
    setMessageId(v) {
        this.origin.id = v;
        return this;
    }
    getMessageId() {
        return this.origin.id;
    }
    setMessageType(v) {
        this.origin.type = v;
        return this;
    }
    getMessageType() {
        return this.origin.type;
    }
    setMessageData(v) {
        this.origin.setData(v);
        return this;
    }
    getMessageData() {
        return this.origin.getData();
    }
}
exports.LLRPProxyMessage = LLRPProxyMessage;
//# sourceMappingURL=message.js.map